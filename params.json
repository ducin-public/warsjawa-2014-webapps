{"name":"Warsjawa 2014 workshop","tagline":"Modern webapp development workflow/tools","body":"# Modern webapp development workflow/tools\r\n\r\n## workshop scenario\r\n\r\n26th September 2014,\r\n[Warsjawa](http://warsjawa.pl/)  \r\n[Tomasz Ducin](http://pl.linkedin.com/pub/tomasz-ducin/4b/34a/822)\r\n\r\n> JavaScript has been under phenomenal development during recent years. As an indirect result of browser wars, node.js has been introduced, which enabled developers to run JS on the server side. Thanks to this, lots of professional tools have been created: npm (package manager), grunt (automating, building), bower (assets manager), yeoman (skeleton generators). Additionally, many other tools could be executed on the server-side from now on, e.g. end-to-end testing without a browser (phantom/casper). This has promoted JS applications to full-professional projects with stable development workflow: building, testing, deployment - where everything is automated using well-known tools such as jenkins or git.\r\n\r\n> Nowadays, the possibilities of JavaScript are a lot more than colourful forms written with obtrusive mixture of jquery and html, as it used to be some time ago. During this talk, I want to show what JavaScript can do now - what are the tools, how you can use them and why are they useful. And it doesn't matter what single-page-app framework you use (angular, bb, ember) or what server-side technology you use (the server itself doesn't have to rely on node.js).\r\n\r\n----\r\n\r\n[![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\r\n\r\n## intro\r\n\r\n### prerequisites\r\n - node/npm installed, v0.10+\r\n - git installed, github account\r\n - shell (bash, powershell, etc.)\r\n - modern browser\r\n\r\nI'm gonna use linux/ubuntu and chrome.\r\n\r\n### plan\r\n - separate tools: npm, bower, grunt, yo\r\n - combining tools: yeoman workflow\r\n - _only if we have time: travis-ci, modernizr_\r\n\r\n### aim\r\n - how to turn [raw development code](https://github.com/jashkenas/underscore/blob/master/underscore.js) into [production app](http://google.com) *fast*\r\n\r\n\r\n----\r\n\r\n# [npm](https://www.npmjs.org/): node package manager\r\n\r\n![Node package manager logo](images/npm-small.png \"npm logo\")\r\n\r\n[npm search](https://www.npmjs.org/search?q=warsjawa)\r\n\r\ninstall a package globally:\r\n\r\n    [sudo] npm install -g <package>\r\n\r\nor locally:\r\n\r\n    npm install <package>\r\n    npm install <package> --save\r\n    npm install <package> --save-dev\r\n\r\nmore in the [docs](https://www.npmjs.org/doc/cli/npm-install.html). Use search and install a module, e.g. jquery (no deps), backbone (deps), underscore (independent on backbone):\r\n\r\n    mkdir project && cd project\r\n    npm install [...]\r\n\r\n:exclamation: don't do `sudo npm install <package>` (sudo, non-global), see\r\n - `~/.npm`\r\n - `/usr/lib/node_modules`\r\n\r\nnitialize project manually (grab [minimalistic example](files/package.json)):\r\n\r\n    # inside project directory\r\n    #EDITOR package.json # creating manifest file\r\n\r\nor automatically:\r\n\r\n    npm init # creating manifest file\r\n\r\nfetch dependencies from existent project:\r\n\r\n    git clone https://github.com/tkoomzaaskz/warsjawa-2014-webapps\r\n    cd warsjawa-2014-webapps\r\n    npm install\r\n\r\npublish/unpublish package (`package.json` file needed with `name` and `version` specified):\r\n\r\n    npm publish\r\n    npm unpublish [--force]\r\n\r\n\r\n----\r\n\r\n# [bower](http://bower.io/): web assets manager\r\n\r\n![Bower web assets manager logo](images/bower-small.png \"bower logo\")\r\n\r\n:question: when to use `npm` and when `bower` ([SO question](http://stackoverflow.com/a/21199026), [another SO question](http://stackoverflow.com/q/15092345/769384), [extensive guide](http://tech.pro/tutorial/1190/package-managers-an-introductory-guide-for-the-uninitiated-front-end-developer))\r\n\r\n[bower search](http://bower.io/search/)\r\n\r\ninstall bower tool:\r\n\r\n    [sudo] npm install -g bower\r\n\r\ninitialize manually (grab [minimalistic example](files/bower.json)):\r\n\r\n    $EDITOR bower.json # creating manifest file\r\n\r\nor automatically:\r\n\r\n    bower init # creating manifest file\r\n\r\n:question: purpose of _main file_ ([SO question](http://stackoverflow.com/questions/20391742/what-is-the-main-property-when-doing-bower-init))\r\n\r\ninstall packages:\r\n\r\n    bower install <package>\r\n    bower install <package> --save\r\n    bower install <package> --save-dev\r\n\r\n:exclamation: dependencies (install underscore, then backbone, then marionette and check underscore version each time)\r\n\r\n:exclamation: installed bower_components are bower packages themselves and their dependencies may be fetched as well. Step into marionette and run `bower install`\r\n\r\n:exclamation: ignore devDependencies: `bower install <package> --production`\r\n\r\n\r\n\r\n:question: bower `depencencies` vs `devDepencencies` ([SO question](http://stackoverflow.com/a/19341028/769384))\r\n\r\nregister your package:\r\n\r\n    bower register <my-package-name> <git-endpoint>\r\n\r\n:exclamation: git only, git tags\r\n\r\nmore about [creating and maintaining bower packages ](http://bob.yexley.net/creating-and-maintaining-your-own-bower-package/)\r\n\r\n[customize](http://bower.io/docs/config/) bower:\r\n\r\n    $EDITOR .bowerrc\r\n\r\ngrab an [example](files/.bowerrc) (or [this one](https://github.com/tkoomzaaskz/warsjawa-2014-webapps/blob/master/files/.bowerrc) if previous link is broken) that overrides `bower_components` to `src/vendor`\r\n\r\n\r\n----\r\n\r\n# [grunt](http://gruntjs.com/): task runner ##\r\n\r\n![Grunt task runner logo](images/grunt-small.png \"grunt logo\")\r\n\r\n[grunt search](http://gruntjs.com/plugins)\r\n\r\n:exclamation: example [Gruntfile](Gruntfile.js) from this repo with tasks: clean, concat, replace, watch\r\n\r\ninstall grunt tool:\r\n\r\n    [sudo] npm install -g grunt-cli\r\n    npm install grunt --save-dev\r\n\r\n:question: `grunt-cli` and `grunt` are separate - why is that\r\n\r\ninitialize manually (grab [this repo example](Gruntfile.js)):\r\n\r\n    $EDITOR Gruntfile.js\r\n\r\nor automatically:\r\n\r\n    [sudo] npm install -g grunt-init\r\n    grunt-init gruntfile\r\n\r\n:question: more [grunt-init tasks](http://stackoverflow.com/a/18745996/769384).\r\n\r\n### basic grunt configuration - plugins, targets\r\n\r\n:exclamation: analyse generated gruntfile\r\n\r\ngrunt API: see [docs](http://gruntjs.com/getting-started#an-example-gruntfile)\r\n\r\nbasic working example: see [this repo example](Gruntfile.js)\r\n\r\n### example tasks\r\n\r\n:exclamation: `grunt-contrib-*`\r\n\r\nstatic code analysis:\r\n\r\n    npm install grunt-contrib-jshint --save-dev\r\n\r\nrelease build:\r\n\r\n    npm install grunt-contrib-uglify --save-dev\r\n\r\nbackground automatic tasks:\r\n\r\n    npm install grunt-contrib-watch --save-dev\r\n\r\nmore tasks:\r\n[copy](https://github.com/gruntjs/grunt-contrib-copy),\r\n[concat](https://github.com/gruntjs/grunt-contrib-concat),\r\n[cssmin](https://github.com/gruntjs/grunt-contrib-cssmin),\r\n[sass](https://github.com/gruntjs/grunt-contrib-sass)/[compass](https://github.com/gruntjs/grunt-contrib-compass),\r\n[requirejs](https://github.com/gruntjs/grunt-contrib-requirejs),\r\n[compress](https://github.com/gruntjs/grunt-contrib-compress)\r\n\r\n### more\r\n\r\n:question: how about alternatives: [gulp](http://gulpjs.com/), [brunch](http://brunch.io/)? See [grunt vs brunch](http://alxhill.com/blog/articles/brunch-coffeescript-angular/) or [grunt vs gulp vs brunch](http://blog.toggl.com/2014/03/grunt-vs-gulp-vs-brunch/) subjective comparisons\r\n\r\n\r\n----\r\n\r\n# [yo](http://yeoman.io/): project scaffolding\r\n\r\n![Yeoman project scaffolding logo](images/yeoman-small.png \"yeoman logo\")\r\n\r\n[yeoman search](http://yeoman.io/generators/)\r\n\r\ninstall yeoman tool:\r\n\r\n    [sudo] npm install -g yo\r\n\r\nsearches `generator-*` node modules\r\n\r\n## using generators\r\n\r\ninstall specific generator:\r\n\r\n    [sudo] npm install -g generator-webapp\r\n\r\nand run it:\r\n\r\n    mkdir my-yo-project\r\n    cd my-yo-project\r\n    yo webapp\r\n\r\n## yeoman workflow\r\n\r\nhttp://yeoman.io/learning/\r\n\r\n\r\n\r\n----\r\n\r\n# [travis](https://travis-ci.org/): continuous integration ##\r\n\r\n![Travis-ci logo](images/travis-small.png \"travis-ci logo\")\r\n\r\n - register account (using github account)\r\n - create stub test command\r\n - update package.json:\r\n```\r\n\"scripts\": {\r\n    \"test\": <my-test-command>\r\n}\r\n```\r\n - create travis manifest file (grab [example](files/.travis.yml)):\r\n```\r\n$EDITOR .travis.yml\r\n```\r\n - push to github\r\n\r\n\r\n----\r\n\r\n# practice\r\n\r\n - [sinon.js](http://sinonjs.org/) problem: install it with bower and [grunt-bower-task](https://github.com/yatskevich/grunt-bower-task) (rely on [this article](https://muffinresearch.co.uk/using-sinon-js-with-bower-why-is-sinon-foo-undefined/))\r\n\r\n![Modernizr logo](images/modernizr-small.png \"moedrnizr logo\")\r\n\r\n## further practice\r\n\r\n - try out [angular-based tutorial](http://yeoman.io/codelab.html)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}